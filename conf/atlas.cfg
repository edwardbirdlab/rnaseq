// Profile config names for nf-core/configs
params {
    config_profile_description = 'Atlas - USDA ARS'
    config_profile_contact = 'Edward Bird - Edwardbirdlab@gmail.com'
    config_profile_url = 'https://github.com/edwardbirdlab'
    priority = null
    clusterOptions='--account culicoides --nodes 1' //make sure to change account!
    schema_ignore_params = "clusterOptions"
    validationSchemaIgnoreParams = "clusterOptions,schema_ignore_params"
}
 
apptainer {
    enabled = true
    libraryDir = "/project/culicoides/bird_projects/containers/temp"
    cacheDir = "/project/culicoides/bird_projects/containers/temp"
    autoMounts = true
}
 
params {

    config_profile_name        = 'ScinetAtlas'
    config_profile_description = 'Running rnaseq on Atlas'
    max_memory = 192.GB
    max_cpus   = 36
    max_time   = 8.h
}
 
process {
    executor = 'slurm'
    clusterOptions = { "${params.clusterOptions ?: ''}" }
    queue = 'atlas'
    scratch = false
    errorStrategy = { sleep(200); return 'retry' }
    maxRetries = 2

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
